{"version":3,"sources":["api/api.js","Home.js","Connect4.js","App.js","index.js"],"names":["axios","create","baseURL","DropDown","props","options","i","userNames","length","value","onChange","Home","state","playerName","loggedIn","selectName","bind","setUserName","inputUserName","a","console","log","api","get","response","this","setState","data","post","then","alert","error","event","target","queuedGamesHtml","login","to","getUserNames","queuedGames","id","onClick","selectGame","fillCount","type","placeholder","name","className","logIn","React","Component","Cell","color","Column","newCells","j","y","x","cells","handleClick","Grid","Array","from","fill","player","playerTurn","winner","socket","socketIOClient","columnNum","columns","Connect4","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c43f1c2.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({baseURL: 'http://localhost:3000'})","import './App.css';\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport api from './api/api';\r\n\r\nfunction DropDown(props){\r\n    let options = []\r\n    \r\n    for(let i = 0; i < props.userNames.length; i++){\r\n        options[i] = <option value = {props.userNames[i]}> {props.userNames[i]} </option>\r\n    }\r\n    \r\n    return(   \r\n        <select value = {props.value} onChange = {props.onChange}>\r\n            {options}\r\n        </select>\r\n    )\r\n}\r\n\r\nclass Home extends React.Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            playerName: '',\r\n            loggedIn: false,\r\n            userNames: null\r\n        }\r\n\r\n        this.selectName = this.selectName.bind(this)\r\n        this.setUserName = this.setUserName.bind(this)\r\n        this.inputUserName = this.inputUserName.bind(this)\r\n    }\r\n\r\n    async getUserNames () {\r\n        console.log(\"getting usernames\")\r\n        try{\r\n            const response = await api.get('/api/userNames')\r\n            this.setState({\r\n                userNames: response.data,\r\n            })\r\n            console.log(response.data)\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async setUserName () {\r\n        console.log(\"setting user name\")\r\n        console.log(this.state.playerName)\r\n        const response = await api.post('/api/newUserName', {\r\n            ...this.state.playerName\r\n        })\r\n        .then((response) =>{      \r\n            if(response.data !== 'good'){\r\n                alert(response.data)\r\n                return false\r\n            }\r\n            else{\r\n                return true\r\n            }\r\n        }, \r\n        (error) => {\r\n            console.log(response)\r\n        })\r\n        \r\n    }\r\n\r\n    logIn(){\r\n        let loggedIn = false;\r\n        if(this.state.playerName === ''){\r\n            alert(\"please enter a name\")\r\n        }\r\n        else{\r\n            loggedIn = this.setUserName()\r\n            console.log(\"logged in\")\r\n        }\r\n        \r\n        this.setState({\r\n            loggedIn: loggedIn\r\n        })\r\n    }\r\n\r\n    inputUserName(event){\r\n        this.setState({\r\n            playerName: event.target.value\r\n        })\r\n    }\r\n\r\n    selectName(event){\r\n        this.setState({\r\n            playerName: event.target.value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        let queuedGamesHtml = []\r\n        let login = <Link to ='/Connect4'>Start Game</Link>\r\n\r\n        if(this.state.userNames === null){\r\n            this.getUserNames();\r\n        }\r\n        if(this.state.userNames !== null){\r\n            if(!this.state.loggedIn){\r\n                login =  <ul>\r\n                            <label>Username : </label>   \r\n                            <input value = {this.state.playerName} onChange={this.inputUserName} type=\"text\" placeholder=\"Enter Username\" name=\"username\" />  \r\n                            <DropDown value = {this.state.playerName} userNames = {this.state.userNames} onChange = {this.selectName}/>\r\n                            <Link to ='/Connect4' className = 'entry' onClick = {() => this.logIn()}>LogIn</Link>\r\n                            \r\n                        </ul>\r\n            }\r\n            else{\r\n                for(let i = 0; i < this.state.queuedGames.length; i ++){\r\n                    queuedGamesHtml[i] = <a id = {i} onClick = {() => this.selectGame()}>{this.state.queuedGames[i].fillCount}</a>\r\n                }\r\n            }\r\n        }\r\n\r\n        return(\r\n            <div className=\"App\">\r\n                <header className = \"title\">Home</header>\r\n                <div>\r\n                    {queuedGamesHtml}\r\n                </div>\r\n                <div className = \"submission-holder\">\r\n                    {login}\r\n\t\t\t\t</div>\r\n                \r\n                {/* switches from home page to connect4*/}\r\n            </div>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\nexport default Home;","import './App.css';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport './Connect4.css';\r\n\r\nconst ENDPOINT = \"http://127.0.0.1:4001\";\r\n\r\n/*\r\n    scroll to bottom for description\r\n\r\n*/\r\n\r\nfunction Cell(props){//react function for creating a circle element or cell, the color of the cell is passed through props\r\n    return <div className = 'cell'>\r\n               <div className = {props.color}>  \r\n               </div>\r\n           </div>\r\n}\r\n\r\nfunction Column(props){  //react function for creating a collum, each collum holds an array of cells. \r\n    let newCells = []; //creating the holder of cells\r\n    for(let j = 0; j < 6; j++){ //filling the collum with cells or cirlcles, the props.cells contains the color of the corresponding cell in memory\r\n        newCells[j] =<Cell\r\n                        key = {j}\r\n                        y = {j}\r\n                        x = {props.x}\r\n                        color = {props.cells[j]} //assign the color of the cell from the collumns list of colors\r\n                      ></Cell>\r\n    }\r\n    \r\n    return <div className=\"collumn\" onClick = {() => props.handleClick()}> \r\n               {newCells}\r\n           </div> // return the created collumn with the proper cell elements added, attatch the click handler to the collumn not the cells\r\n}\r\n\r\n\r\nclass Grid extends React.Component {\r\n    constructor(){\r\n        super();\r\n        var newCells =  Array.from(Array(7), () => {\r\n            return new Array(6).fill('none')\r\n        })\r\n        \r\n        this.state = { \r\n            cells: newCells,\r\n            player: '',\r\n            playerTurn: '',\r\n            winner: '',\r\n            socket: socketIOClient(ENDPOINT)\r\n        }\r\n    }\r\n\r\n    handleClick(columnNum) {        \r\n        if(this.state.winner === ''){  //if no winner lets check add another circle and check if theres a winner\r\n            let newCells = this.state.cells;\r\n\r\n            this.setState({\r\n                cells: newCells,    \r\n                playerTurn: 'red',\r\n            })\r\n                               \r\n        }\r\n    }\r\n    \r\n    render(){    \r\n        let columns = [] //create an empty array to hold the collumn elements. assign the coloring of each cell or circle by passing the current state array in\r\n        for(let i = 0; i < 7; i++){\r\n            columns[i] =\r\n                <Column\r\n                    key = {i}\r\n                    x = {i}\r\n                    cells = {this.state.cells[i]}\r\n                    handleClick = {() => this.handleClick(i)}\r\n                ></Column>//send in click handler to the collumn and each array of cell colors to the corresponding collumn\r\n        }\r\n                \r\n        return(\r\n            <div>\r\n                <div className = 'grid'>\r\n                    {columns}\r\n                </div>\r\n                <div className = 'winner-text'> {this.state.winner} </div>\r\n            </div>\r\n        ); //create the header and the grid, the div element grid hols the collumns \r\n  }\r\n}\r\n\r\n\r\nclass Connect4 extends React.Component {\r\n    render(){\r\n        //create a socket connection to the server, player id is there ip, submit the cells list to the socket and wait for a resposne if winner or not,\r\n        //if not winner, dont allow the user to do anything, make socket io cause react to wait for other user to attempt\r\n        //should be waiting for two events, a winner or another turn, just repeat till board is either filled or a winner is declared.\r\n\r\n        return(\r\n            <div>\r\n                <a className = \"info\"></a>         \r\n                <a className = \"turn\">red </a>\r\n                <Grid/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Connect4;\r\n\r\n\r\n\r\n","import './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport React from 'react';\nimport Home from './Home';\nimport Connect4 from './Connect4';\nimport api from './api/api'\n\nclass App extends React.Component {\n    constructor(props){\n        super(props)\n    }\n    \n    render(){\n        return (\n            <Router>\n                <Switch> \n                    <Route exact path='/'>               \n                        <Home/>\n                    </Route>\n                    <Route exact path='/Connect4'>\n                        <Connect4/>\n                    </Route>\n                </Switch>\n            </Router>\n        )    \n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}