{"version":3,"sources":["Home.js","Connect4.js","App.js","index.js"],"names":["Home","to","React","Component","Cell","props","className","color","Column","newCells","j","y","x","cells","onClick","handleClick","Grid","Array","from","fill","state","player","playerTurn","winner","columnNum","this","prevState","setState","columns","i","Connect4","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAIMA,E,4JACF,WAKI,OACI,gCACI,qCACA,cAAC,IAAD,CAAMC,GAAI,YAAV,iC,GATGC,IAAMC,WAiBVH,I,YCPf,SAASI,EAAKC,GACV,OAAO,qBAAKC,UAAY,OAAjB,SACI,qBAAKA,UAAaD,EAAME,UAKvC,SAASC,EAAOH,GAEZ,IADA,IAAII,EAAW,GACPC,EAAI,EAAGA,EAAI,EAAGA,IAClBD,EAASC,GAAI,cAACN,EAAD,CAEGO,EAAKD,EACLE,EAAKP,EAAMO,EACXL,MAASF,EAAMQ,MAAMH,IAHdA,GAO3B,OAAO,qBAAKJ,UAAU,UAAUQ,QAAW,kBAAMT,EAAMU,eAAhD,SACKN,I,IAKVO,E,kDACF,aAAc,IAAD,sBACT,eACA,IAAIP,EAAYQ,MAAMC,KAAKD,MAAM,IAAI,WACjC,OAAO,IAAIA,MAAM,GAAGE,KAAK,WAHpB,OAMT,EAAKC,MAAQ,CACTP,MAAOJ,EACPY,OAAQ,GACRC,WAAY,MACZC,OAAQ,IAVH,E,+CAgBb,SAAYC,GACR,GAAyB,KAAtBC,KAAKL,MAAMG,OACV,IAAI,IAAIZ,EAAI,EAAGA,GAAK,EAAGA,IACnB,GAAsC,SAAnCc,KAAKL,MAAMP,MAAMW,GAAWb,GAAc,CAEzC,IAAIe,EAAYD,KAAKL,MACjBX,EAAWgB,KAAKL,MAAMP,MAC1BJ,EAASe,GAAWb,GAAKe,EAAUJ,WAEnCG,KAAKE,SAAS,CACVd,MAAOJ,EACPa,WAAsC,QAAzBI,EAAUJ,WAAwB,QAAU,QAI7D,S,oBAMhB,WAEI,IAFK,IAAD,OACAM,EAAU,GADV,WAEIC,GACJD,EAAQC,GACJ,cAACrB,EAAD,CAEII,EAAKiB,EACLhB,MAAS,EAAKO,MAAMP,MAAMgB,GAC1Bd,YAAe,kBAAM,EAAKA,YAAYc,KAH/BA,IAHXA,EAAI,EAAGA,EAAI,EAAGA,IAAK,EAAnBA,GAUR,OACI,gCACI,qBAAKvB,UAAY,OAAjB,SACKsB,IAEL,sBAAKtB,UAAY,cAAjB,cAAiCmB,KAAKL,MAAMG,OAA5C,c,GAvDGrB,IAAMC,WA8DnB2B,E,4JACF,WAKI,OACI,gCACI,yCACA,cAAC,IAAD,CAAM7B,GAAK,IAAX,0BACA,cAAC,EAAD,W,GAVOC,IAAMC,WAgBd2B,IC9GTC,E,4JACF,WACI,OACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SAEI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,YAAlB,SACI,cAAC,EAAD,e,GAVN/B,IAAMC,WAmBT4B,ICpBfG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.358dd9dc.chunk.js","sourcesContent":["import './App.css';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Home extends React.Component {\r\n    render(){\r\n        //display a box that contains all the queue games, get queue games from server with axios request\r\n\r\n        //when a queued game is selected and a submit button is pressed, post the queue game to the server and start new game, switch the screen to the connect 4 app using link\r\n\r\n        return(\r\n            <div>\r\n                <a>HOME</a>\r\n                <Link to ='/Connect4'> Start game </Link>\r\n                {/* switches from home page to connect4*/}\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import './App.css';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport './Connect4.css';\r\n\r\nconst ENDPOINT = \"http://127.0.0.1:4001\";\r\n\r\n/*\r\n    scroll to bottom for description\r\n\r\n*/\r\n\r\n\r\nfunction Cell(props){//react function for creating a circle element or cell, the color of the cell is passed through props\r\n    return <div className = 'cell'>\r\n               <div className = {props.color}>  \r\n               </div>\r\n           </div>\r\n}\r\n\r\nfunction Column(props){  //react function for creating a collum, each collum holds an array of cells. \r\n    let newCells = []; //creating the holder of cells\r\n    for(let j = 0; j < 6; j++){ //filling the collum with cells or cirlcles, the props.cells contains the color of the corresponding cell in memory\r\n        newCells[j] =<Cell\r\n                        key = {j}\r\n                        y = {j}\r\n                        x = {props.x}\r\n                        color = {props.cells[j]} //assign the color of the cell from the collumns list of colors\r\n                      ></Cell>\r\n    }\r\n    \r\n    return <div className=\"collumn\" onClick = {() => props.handleClick()}> \r\n               {newCells}\r\n           </div> // return the created collumn with the proper cell elements added, attatch the click handler to the collumn not the cells\r\n}\r\n\r\n\r\nclass Grid extends React.Component {\r\n    constructor(){\r\n        super();\r\n        var newCells =  Array.from(Array(7), () => {\r\n            return new Array(6).fill('none')\r\n        })//create and empty double array with each color being none, or just blank\r\n        \r\n        this.state = { \r\n            cells: newCells,\r\n            player: '',\r\n            playerTurn: 'red',\r\n            winner: ''\r\n        }\r\n    }\r\n\r\n\r\n\r\n    handleClick(columnNum) {        \r\n        if(this.state.winner === ''){  //if no winner lets check add another circle and check if theres a winner\r\n            for(let y = 6; y > -1; y--){ //cycle through the state double array, where the clicked collumn indicated which array to select\r\n                if(this.state.cells[columnNum][y] === 'none'){ //cycle upward through the collumn until and empty spot is found\r\n \r\n                    let prevState = this.state; //capture the current state and assign new values\r\n                    let newCells = this.state.cells;\r\n                    newCells[columnNum][y] = prevState.playerTurn; \r\n\r\n                    this.setState({\r\n                        cells: newCells,    \r\n                        playerTurn: (prevState.playerTurn === 'red') ? 'black' : 'red',\r\n\r\n                    })\r\n                    //set the new state and add the new color, when assigning the new winner state call the function check winner to see if theres a winer based on the new set of cells\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    render(){    \r\n        let columns = [] //create an empty array to hold the collumn elements. assign the coloring of each cell or circle by passing the current state array in\r\n        for(let i = 0; i < 7; i++){\r\n            columns[i] =\r\n                <Column\r\n                    key = {i}\r\n                    x = {i}\r\n                    cells = {this.state.cells[i]}\r\n                    handleClick = {() => this.handleClick(i)}\r\n                ></Column>//send in click handler to the collumn and each array of cell colors to the corresponding collumn\r\n        }\r\n                \r\n        return(\r\n            <div>\r\n                <div className = 'grid'>\r\n                    {columns}\r\n                </div>\r\n                <div className = 'winner-text'> {this.state.winner} </div>\r\n            </div>\r\n        ); //create the header and the grid, the div element grid hols the collumns \r\n  }\r\n}\r\n\r\n\r\nclass Connect4 extends React.Component {\r\n    render(){\r\n        //create a socket connection to the server, player id is there ip, submit the cells list to the socket and wait for a resposne if winner or not,\r\n        //if not winner, dont allow the user to do anything, make socket io cause react to wait for other user to attempt\r\n        //should be waiting for two events, a winner or another turn, just repeat till board is either filled or a winner is declared.\r\n\r\n        return(\r\n            <div>\r\n                <a>Connect4</a>\r\n                <Link to = '/'> return home</Link>\r\n                <Grid/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Connect4;\r\n\r\n\r\n\r\n","import './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport React from 'react';\nimport Home from './Home';\nimport Connect4 from './Connect4';\n\nclass App extends React.Component {\n    render(){\n        return (\n            <Router>\n                <Switch>\n                    <Route exact path='/'>\n                        {/*default routes to home*/}\n                        <Home/>\n                    </Route>\n                    <Route exact path='/Connect4'>\n                        <Connect4/>\n                    </Route>\n                </Switch>\n            </Router>\n        )    \n    }\n    \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}